lines(pred$pred, col='blue')
lines(pred$pred+2*pred$se, col='red')
lines(pred$pred-2*pred$se, col='red')
lines(ts_data.test, col='purple')
plot(ts_data.train)
plot.ts(ts_data.train, )
plot(x=1:731, y=ts_data.train)
plot(x=1:731)
plot(ts_data.train)
plot.ts(ts_data.train)
plot.ts(ts_data)
lines(pred$pred, col='blue')
lines(pred$pred+2*pred$se, col='red')
lines(pred$pred-2*pred$se, col='red')
lines(ts_data.test, col='purple')
#2.	Describe the time step formatting of the realization,
#including any gaps in measurement and the length of the sequence.
data$Day
diff_ts <- diff(ts_data)
ts.plot(diff_ts)
adf.test(diff_ts)
diff_ts <- diff(ts_data)
ts.plot(diff_ts)
adf.test(diff_ts)
#c.	auto correlation function
acf(ts_data, lag.max=100)
#c.	auto correlation function
acf(ts_data, lag.max=365)
model <- arima(diff_ts, order = c(1,0,0))
a[1] <- AIC(model)
b[1] <- BIC(model)
for (i in 1:5){
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 0), ' BIC: ', round(b[i], 0), sep=''))
}
a <- c()
b <- c()
model <- arima(diff_ts, order = c(1,1,0))
a[1] <- AIC(model)
b[1] <- BIC(model)
model2 <- arima(diff_ts, order = c(1,0,0))
a[2] <- AIC(model2)
b[2] <- BIC(model2)
model3 <- arima(diff_ts, order = c(1,1,1))
a[3] <- AIC(model3)
b[3] <- BIC(model3)
model4 <- arima(diff_ts, order = c(1,0,1))
a[4] <- AIC(model4)
b[4] <- BIC(model4)
model5 <- arima(diff_ts, order = c(1,0,2))
a[5] <- AIC(model5)
b[5] <- BIC(model5)
model6 <- arima(diff_ts, order = c(1,1,2))
a[6] <- AIC(model6)
b[6] <- BIC(model6)
for (i in 1:6){
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 0), ' BIC: ', round(b[i], 0), sep=''))
}
model <- arima(diff_ts, order = c(1,1,1))
a[1] <- AIC(model)
b[1] <- BIC(model)
model2 <- arima(diff_ts, order = c(1,0,1))
a[2] <- AIC(model2)
b[2] <- BIC(model2)
model3 <- arima(diff_ts, order = c(1,1,2))
a[3] <- AIC(model3)
b[3] <- BIC(model3)
model4 <- arima(diff_ts, order = c(1,0,2))
a[4] <- AIC(model4)
b[4] <- BIC(model4)
model5 <- arima(diff_ts, order = c(1,0,3))
a[5] <- AIC(model5)
b[5] <- BIC(model5)
model6 <- arima(diff_ts, order = c(1,1,3))
a[6] <- AIC(model6)
b[6] <- BIC(model6)
for (i in 1:6){
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 0), ' BIC: ', round(b[i], 0), sep=''))
}
a <- c()
b <- c()
for (i in 1:12) {
for (p in 1:2) {
for (d in 1:2) {
for (q in 1:3) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
}
}
}
}
for (i in 1:12){
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 0), ' BIC: ', round(b[i], 0), sep=''))
}
i <- 1
for (p in 1:2) {
for (d in 1:2) {
for (q in 1:3) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
i <- i+1
}
}
}
for (i in 1:12){
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 0), ' BIC: ', round(b[i], 0), sep=''))
}
i <- 1
for (p in 0:2) {
for (d in 0:1) {
for (q in 0:4) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
i <- i+1
}
}
}
for (i in 1:30){
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 0), ' BIC: ', round(b[i], 0), sep=''))
}
model_params <- c()
i <- 1
for (p in 0:2) {
for (d in 0:1) {
for (q in 0:4) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
model_params[i] <- c(p,d,q)
i <- i+1
}
}
}
warnings()
i <- 1
for (p in 0:2) {
for (d in 0:1) {
for (q in 0:4) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 0), ' BIC: ', round(b[i], 2), ' Params: ', p, d, q, sep=''))
i <- i+1
}
}
}
a <- c()
b <- c()
i <- 1
for (p in 0:2) {
for (d in 0:1) {
for (q in 0:4) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 2),
' BIC: ', round(b[i], 2), ' Params: ', p, d, q, sep=''))
i <- i+1
}
}
}
min(a)
min(b)
fin_model <- arima(ts_data.train, order = c(0,0,2))
fin_model <- arima(ts_data.train, order = c(0,0,2))
#3.	Perform a forecast using the derived ARIMA model.
pred <- predict(fin_model, n.ahead=150)
plot.ts(ts_data)
lines(pred$pred, col='blue')
lines(pred$pred+2*pred$se, col='red')
lines(pred$pred-2*pred$se, col='red')
lines(ts_data.test, col='purple')
fin_model <- arima(ts_data.train, order = c(1,0,0))
#3.	Perform a forecast using the derived ARIMA model.
pred <- predict(fin_model, n.ahead=150)
plot.ts(ts_data)
lines(pred$pred, col='blue')
lines(pred$pred+2*pred$se, col='red')
lines(pred$pred-2*pred$se, col='red')
lines(ts_data.test, col='purple')
fin_model <- arima(ts_data.train, order = c(1,0,2))
#3.	Perform a forecast using the derived ARIMA model.
pred <- predict(fin_model, n.ahead=150)
plot.ts(ts_data)
lines(pred$pred, col='blue')
lines(pred$pred+2*pred$se, col='red')
lines(pred$pred-2*pred$se, col='red')
lines(ts_data.test, col='purple')
#d.	spectral density
spectrum(ts_data)
spectrum(diff_ts)
legend()
acf(res, lag.max = 90)
pacf(res, lag.max = 90)
decompose(res)
#C
#1.	Provide a line graph visualizing the realization of the time series.
data <- read.csv('medical_time_series.csv')
ts_data <- ts(data[, 2])
ts.plot(ts_data)
#2.	Describe the time step formatting of the realization,
#including any gaps in measurement and the length of the sequence.
data$Day
#3.	Evaluate the stationarity of the time series.
library(tseries)
adf.test(ts_data)
#4.	Explain the steps used to prepare the data for analysis,
#including the training and test set split.
ts_data.train <- ts_data[1:580]
ts_data.test <- data[580:731, 2]
ts_data.test <- ts(ts_data.test, start=580)
diff_ts <- diff(ts_data)
ts.plot(diff_ts)
adf.test(diff_ts)
#D
#1.	Report the annotated findings with visualizations of your data analysis,
#including the following elements:
#a.	the presence or lack of a seasonal component
ts_data_months <- ts(data[, 2], start=1, frequency=30)
decomposed_ts <- decompose(ts_data_months)
plot(decomposed_ts$seasonal)
#b.	trends
plot(decomposed_ts$trend)
#c.	auto correlation function
acf(ts_data, lag.max=365)
pacf(ts_data, lag.max=10)
#https://towardsdatascience.com/significance-of-acf-and-pacf-plots-in-time-series-analysis-2fa11a5d10a8
acf(diff_ts, lag.max=10)
pacf(diff_ts, lag.max = 10)
#d.	spectral density
spectrum(ts_data)
spectrum(diff_ts)
#e.	the decomposed time series
plot(decomposed_ts)
#f.	confirmation of the lack of trends in the residuals of the decomposed series
res <- ts(na.omit(decomposed_ts$random))
adf.test(res)
#2.	Identify an autoregressive integrated moving average (ARIMA) model that
#takes into account the observed trend and seasonality of the time series data.
library(forecast)
a <- c()
b <- c()
i <- 1
for (p in 0:2) {
for (d in 0:1) {
for (q in 0:4) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 2),
' BIC: ', round(b[i], 2), ' Params: ', p, d, q, sep=''))
i <- i+1
}
}
}
min(a)
min(b)
#3.	Perform a forecast using the derived ARIMA model.
fin_model <- arima(ts_data.train, order = c(1,0,2))
pred <- predict(fin_model, n.ahead=150)
plot.ts(ts_data)
lines(pred$pred, col='blue')
lines(pred$pred+2*pred$se, col='red')
lines(pred$pred-2*pred$se, col='red')
lines(ts_data.test, col='purple')
mse <- mean((ts_data.train - pred$pred)^2)
mse <- mean((ts_data.test - pred$pred)^2)
mse
decomposed.test <- decompose(ts_data.test)
ts.test.mothly <- ts_data_months[580:731]
decomposed.test <- decompose(ts.test.monthly)
ts.test.monthly <- ts_data_months[580:731]
decomposed.test <- decompose(ts.test.monthly)
ts.test.monthly <- ts(data[580:731, 2], start=580, frequency=30)
decomposed.test <- decompose(ts.test.monthly)
mean((decomposed.test$trend - pred$pred)^2)
mean((decomposed.test$trend[,2] - pred$pred)^2)
pred.monthly <- ts(pred$pred, start=580, frequency=30)
mean((decomposed.test$trend - pred.monthly)^2)
decomposed.test$trend
mean((na.omit(decomposed.test$trend) - na.omit(pred.monthly))^2)
plot.ts(na.omit(decomposed.test$trend))
plot.ts(na.omit(decomposed.test$trend))
plot.ts(na.omit(decomposed_ts$trend[580:731]))
plot.ts(na.omit(decomposed.test$trend))
lines(pred$pred, col='blue')
plot.ts(pred$pred)
lines(na.omit(decomposed.test$trend), col='blue')
#C
#1.	Provide a line graph visualizing the realization of the time series.
data <- read.csv('medical_time_series.csv')
ts_data <- ts(data[, 2])
ts.plot(ts_data)
#2.	Describe the time step formatting of the realization,
#including any gaps in measurement and the length of the sequence.
data$Day
#3.	Evaluate the stationarity of the time series.
library(tseries)
adf.test(ts_data)
#4.	Explain the steps used to prepare the data for analysis,
#including the training and test set split.
ts_data.train <- ts_data[1:580]
ts_data.test <- data[580:731, 2]
ts_data.test <- ts(ts_data.test, start=580)
diff_ts <- diff(ts_data)
ts.plot(diff_ts)
adf.test(diff_ts)
write.csv(ts_data.train, file='train.csv')
write.csv(ts_data.test, file='test.csv')
write.csv(diff_ts, file='diff.csv')
#C
#1.	Provide a line graph visualizing the realization of the time series.
data <- read.csv('medical_time_series.csv')
ts_data <- ts(data[, 2])
ts.plot(ts_data)
#2.	Describe the time step formatting of the realization,
#including any gaps in measurement and the length of the sequence.
data$Day
#3.	Evaluate the stationarity of the time series.
library(tseries)
adf.test(ts_data)
#4.	Explain the steps used to prepare the data for analysis,
#including the training and test set split.
ts_data.train <- ts_data[1:580]
ts_data.test <- data[580:731, 2]
ts_data.test <- ts(ts_data.test, start=580)
diff_ts <- diff(ts_data)
ts.plot(diff_ts)
adf.test(diff_ts)
#D
#1.	Report the annotated findings with visualizations of your data analysis,
#including the following elements:
#a.	the presence or lack of a seasonal component
ts_data_months <- ts(data[, 2], start=1, frequency=30)
decomposed_ts <- decompose(ts_data_months)
plot(decomposed_ts$seasonal)
#b.	trends
plot(decomposed_ts$trend)
#c.	auto correlation function
acf(ts_data, lag.max=365)
pacf(ts_data, lag.max=10)
#https://towardsdatascience.com/significance-of-acf-and-pacf-plots-in-time-series-analysis-2fa11a5d10a8
acf(diff_ts, lag.max=10)
pacf(diff_ts, lag.max = 10)
#d.	spectral density
spectrum(ts_data)
spectrum(diff_ts)
spectrum(ts_data_months)
x = 1:100
cosine = cos(x)
spectrum(cosine)
spectrum(diff_ts)
#d.	spectral density
spectrum(ts_data)
spectrum(diff_ts)
#https://towardsdatascience.com/significance-of-acf-and-pacf-plots-in-time-series-analysis-2fa11a5d10a8
acf(diff_ts, lag.max=10)
#c.	auto correlation function
acf(ts_data, lag.max=365)
plot(decomposed_ts$seasonal)
#b.	trends
plot(decomposed_ts$trend)
#d.	spectral density
spectrum(diff_ts)
#C
#1.	Provide a line graph visualizing the realization of the time series.
data <- read.csv('medical_time_series.csv')
ts_data <- ts(data[, 2])
ts.plot(ts_data)
#2.	Describe the time step formatting of the realization,
#including any gaps in measurement and the length of the sequence.
data$Day
#3.	Evaluate the stationarity of the time series.
library(tseries)
adf.test(ts_data)
#4.	Explain the steps used to prepare the data for analysis,
#including the training and test set split.
ts_data.train <- ts_data[1:580]
ts_data.test <- data[580:731, 2]
ts_data.test <- ts(ts_data.test, start=580)
diff_ts <- diff(ts_data)
ts.plot(diff_ts)
adf.test(diff_ts)
#D
#1.	Report the annotated findings with visualizations of your data analysis,
#including the following elements:
#a.	the presence or lack of a seasonal component
ts_data_months <- ts(data[, 2], start=1, frequency=30)
decomposed_ts <- decompose(ts_data_months)
plot(decomposed_ts$seasonal)
#b.	trends
plot(decomposed_ts$trend)
#c.	auto correlation function
acf(ts_data, lag.max=365)
pacf(ts_data, lag.max=10)
#https://towardsdatascience.com/significance-of-acf-and-pacf-plots-in-time-series-analysis-2fa11a5d10a8
acf(diff_ts, lag.max=10)
pacf(diff_ts, lag.max = 10)
#d.	spectral density
spectrum(diff_ts)
#e.	the decomposed time series
plot(decomposed_ts)
#f.	confirmation of the lack of trends in the residuals of the decomposed series
res <- ts(na.omit(decomposed_ts$random))
adf.test(res)
#2.	Identify an autoregressive integrated moving average (ARIMA) model that
#takes into account the observed trend and seasonality of the time series data.
library(forecast)
a <- c()
b <- c()
i <- 1
for (p in 0:2) {
for (d in 0:1) {
for (q in 0:4) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 2),
' BIC: ', round(b[i], 2), ' Params: ', p, d, q, sep=''))
i <- i+1
}
}
}
min(a)
min(b)
#3.	Perform a forecast using the derived ARIMA model.
fin_model <- arima(ts_data.train, order = c(1,0,2))
pred <- predict(fin_model, n.ahead=150)
plot.ts(ts_data)
lines(pred$pred, col='blue')
lines(pred$pred+2*pred$se, col='red')
lines(pred$pred-2*pred$se, col='red')
lines(ts_data.test, col='purple')
plot.ts(ts_data, main='Forecast of Revenue', ylab='Revenue', xlab='Time (Days)')
plot.ts(ts_data, main='Forecast of Revenue', ylab='Revenue (Millions of Dollars', xlab='Time (Days)')
plot.ts(ts_data, main='Forecast of Revenue', ylab='Revenue (Millions of Dollars)', xlab='Time (Days)')
upper_bound <- pred$pred+2*pred$se
lower_bound <- pred$pred-2*pred$se
plot.ts(ts_data, main='Forecast of Revenue', ylab='Revenue (Millions of Dollars)', xlab='Time (Days)')
lines(pred$pred, col='blue')
lines(upper_bound, col='red')
lines(lower_bound, col='red')
lines(ts_data.test, col='purple')
boundary <- c(upper_bound, lower_bound)
plot.ts(ts_data, main='Forecast of Revenue', ylab='Revenue (Millions of Dollars)', xlab='Time (Days)')
lines(predictions, col='blue')
predictions <- pred$pred
plot.ts(ts_data, main='Forecast of Revenue', ylab='Revenue (Millions of Dollars)', xlab='Time (Days)')
lines(predictions, col='blue')
lines(boundary, col='red')
legend(legend=c(ts_data, predictions, upper_bound, lower_bound, ts_data.test))
legend(ts_data, legend=c(ts_data, predictions, upper_bound, lower_bound, ts_data.test))
legend('bottomleft', legend=c('Revenue'))
legend('bottomleft', legend=c('Training Data', 'Predictions', 'Upper-Boundary Error',
'Lower-Boundary Error', 'Test Data'))
legend('bottomleft',
legend=c('Training Data', 'Predictions', 'Error Boundaries', 'Test Data'),
col=c('black', 'blue', 'red', 'purple')
)
plot.ts(ts_data, main='Forecast of Revenue', ylab='Revenue (Millions of Dollars)', xlab='Time (Days)')
lines(predictions, col='blue')
lines(upper_bound, col='red')
lines(lower_bound, col='red')
lines(ts_data.test, col='purple')
legend('bottomleft',
legend=c('Training Data', 'Predictions', 'Error Boundaries', 'Test Data'),
col=c('black', 'blue', 'red', 'purple')
)
legend('bottomleft',
legend=c('Training Data', 'Predictions', 'Error Boundaries', 'Test Data'),
col=c('black', 'blue', 'red', 'purple'),
pch=15
)
legend('topleft',
legend=c('Training Data', 'Predictions', 'Error Boundaries', 'Test Data'),
col=c('black', 'blue', 'red', 'purple'),
pch=15
)
plot.ts(ts_data, main='Forecast of Revenue', ylab='Revenue (Millions of Dollars)', xlab='Time (Days)')
lines(predictions, col='blue')
lines(upper_bound, col='red')
lines(lower_bound, col='red')
lines(ts_data.test, col='purple')
legend('topleft',
legend=c('Training Data', 'Predictions', 'Error Boundaries', 'Test Data'),
col=c('black', 'blue', 'red', 'purple'),
pch=15
)
a <- c()
b <- c()
i <- 1
for (p in 0:2) {
for (d in 0:1) {
for (q in 0:4) {
model <- arima(diff_ts, order=c(p,d,q))
a[i] <- AIC(model)
b[i] <- BIC(model)
print(paste('model', as.character(i), ' -- AIC: ', round(a[i], 2),
' BIC: ', round(b[i], 2), ' Params: ', p, d, q, sep=''))
i <- i+1
}
}
}
min(a)
min(b)
mean((ts_data.test - pred$pred)^2)
ts.test.monthly <- ts(data[580:731, 2], start=580, frequency=30)
decomposed.test <- decompose(ts.test.monthly)
pred.monthly <- ts(pred$pred, start=580, frequency=30)
mean((na.omit(decomposed.test$trend) - na.omit(pred.monthly))^2)
